'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _hrtime5 = require('./hrtime');

var _hrtime6 = _interopRequireDefault(_hrtime5);

/**
 * @param {number} value Time in nanoseconds
 * @return {string}
 */
var defaultFormatter = function defaultFormatter(value) {
  if (value < 1e3) {
    return value + 'ns';
  }

  if (value < 1e6) {
    return (value / 1e3).toFixed(3) + 'us';
  }

  if (value < 1e9) {
    return (value / 1e6).toFixed(3) + 'ms';
  }

  return (value / 1e9).toFixed(3) + 's';
};

/**
 * @class ElapsedTime
 */

var ElapsedTime = (function () {
  /**
   * @constructor
   * @param {Object} [opts]
   * @param {function} [opts.formatter]
   */

  function ElapsedTime(opts) {
    _classCallCheck(this, ElapsedTime);

    this._prevTime = null;
    this._savedTime = null;

    this._formatter = Object(opts).formatter;
    if (typeof this._formatter !== 'function') {
      this._formatter = defaultFormatter;
    }
  }

  /**
   * @param {Object} [opts]
   * @param {function} [opts.formatter]
   * @return {ElapsedTime}
   */

  _createClass(ElapsedTime, [{
    key: 'start',

    /**
     * @return {ElapsedTime}
     */
    value: function start() {
      if (this._prevTime !== null || this._savedTime !== null) {
        throw new Error('ElapsedTime already started, please call `reset` first!');
      }

      this._prevTime = (0, _hrtime6['default'])();
      this._savedTime = null;

      return this;
    }

    /**
     * @return {ElapsedTime}
     */
  }, {
    key: 'pause',
    value: function pause() {
      if (this._prevTime === null && this._savedTime === null) {
        throw new Error('ElapsedTime not started, please call `start` first!');
      }

      if (this._savedTime !== null) {
        throw new Error('ElapsedTime already paused, please call `resume` first!');
      }

      var _hrtime = (0, _hrtime6['default'])(this._prevTime);

      var _hrtime2 = _slicedToArray(_hrtime, 2);

      var seconds = _hrtime2[0];
      var nanoseconds = _hrtime2[1];

      this._prevTime = null;
      this._savedTime = seconds * 1e9 + nanoseconds;

      return this;
    }

    /**
     * @return {ElapsedTime}
     */
  }, {
    key: 'resume',
    value: function resume() {
      if (this._prevTime === null && this._savedTime === null) {
        throw new Error('ElapsedTime not started, please call `start` first!');
      }

      if (this._savedTime === null) {
        throw new Error('ElapsedTime not paused, please call `pause` first!');
      }

      var _hrtime3 = (0, _hrtime6['default'])();

      var _hrtime32 = _slicedToArray(_hrtime3, 2);

      var seconds = _hrtime32[0];
      var nanoseconds = _hrtime32[1];

      seconds -= Math.floor(this._savedTime / 1e9);
      nanoseconds -= this._savedTime % 1e9;
      if (nanoseconds < 0) {
        seconds -= 1;
        nanoseconds += 1e9;
      }

      this._prevTime = [seconds, nanoseconds];
      this._savedTime = null;

      return this;
    }

    /**
     * @param {number} timeout
     * @return {ElapsedTime}
     */
  }, {
    key: 'sleep',
    value: function sleep(timeout) {
      this.pause();
      setTimeout(this.resume.bind(this), timeout);

      return this;
    }

    /**
     * @return {ElapsedTime}
     */
  }, {
    key: 'reset',
    value: function reset() {
      this._prevTime = null;
      this._savedTime = null;

      return this;
    }

    /**
     * @return {number}
     */
  }, {
    key: 'getRawValue',
    value: function getRawValue() {
      if (this._prevTime === null && this._savedTime === null) {
        throw new Error('ElapsedTime not started yet, please call `start` first!');
      }

      if (this._savedTime !== null) {
        return this._savedTime;
      }

      var _hrtime4 = (0, _hrtime6['default'])(this._prevTime);

      var _hrtime42 = _slicedToArray(_hrtime4, 2);

      var seconds = _hrtime42[0];
      var nanoseconds = _hrtime42[1];

      return seconds * 1e9 + nanoseconds;
    }

    /**
     * @param {Object} [opts]
     * @param {function} [opts.formatter]
     * @return {string}
     */
  }, {
    key: 'getValue',
    value: function getValue(opts) {
      var formatter = Object(opts).formatter;
      if (typeof formatter !== 'function') {
        formatter = this._formatter;
      }

      return formatter(this.getRawValue());
    }
  }], [{
    key: 'new',
    value: function _new(opts) {
      return new ElapsedTime(opts);
    }

    /**
     * @param {function} formatter
     */
  }, {
    key: 'setDefaultFormatter',
    value: function setDefaultFormatter(formatter) {
      defaultFormatter = formatter;
    }
  }]);

  return ElapsedTime;
})();

exports['default'] = ElapsedTime;
module.exports = exports['default'];
//# sourceMappingURL=index.js.map